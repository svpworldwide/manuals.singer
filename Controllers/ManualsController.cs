// ++++++++++++++++++++++++++++++++++++++++++++++++++
// This code is generated by a tool and is provided "as is", without warranty of any kind, 
// express or implied, including but not limited to the warranties of merchantability, 
// fitness for a particular purpose and non-infringement.
// In no event shall the authors or copyright holders be liable for any claim, damages or
// other liability, whether in an action of contract, tort or otherwise, arising from,
// out of or in connection with the software or the use or other dealings in the software.
// ++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using WebManuals.Models;
using WebManuals.Helper;
using static MoreLinq.Extensions.DistinctByExtension;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Json;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Net;
using System.Threading.Tasks;
using System.Threading;
using System.Globalization;
using WebManuals.ViewModels;
using System.Configuration;
using System.Data.Entity;

namespace WebManuals.Controllers
{
	public class ManualsController:BaseController
	{
	   private WebManuals.Models.webmanualsEntities db = new WebManuals.Models.webmanualsEntities();
       
        //
        // GET: /manuals/

        public ActionResult Index()
        {
            var languageid = CultureHelper.CurrentCulture.ToString();
            
            ViewBag.modeltypeid = "";
            if (languageid == null)
            {
                languageid = "";
            }
           
            var mastertypes = db.manuals.Where(m => m.manual_languageid.ToString() == languageid);
             
            var viewModel = new MainViewModel {                
                MasterTypes = mastertypes.Select(m => new  MasterTypesVM(){
                    Manualid = m.manualid,
                    Manual_name = m.manual_name,
                    Manual_master_model = m.manual_master_model
                }).DistinctBy(m => m.Manual_name).ToList(),            
            LocalizedManualDetails = new LocalizedManualDetails()
            };
            
            return View(viewModel);           
        }
        
        [HttpPost]
        public ActionResult Index(FormCollection form, MainViewModel viewModel)        
        {

                    
            var modeltypeid = "";
            var languageid = CultureHelper.CurrentCulture.ToString();
            if (languageid == null)
            {
                languageid = "";
            }
            
            if (form.Count > 0)
            {                                
                modeltypeid = form["modeltypeId"].ToString();
                ViewBag.modeltypeid = modeltypeid;
            }

            if (modeltypeid != "" && languageid != "")
            {
                viewModel.MasterTypes = db.manuals.Where(m => m.manual_modeltypeid.ToString() == modeltypeid && m.manual_languageid.ToString() == languageid).Select(m => new MasterTypesVM()
                {
                    Manualid = m.manualid,
                    Manual_name = m.manual_name,
                    Manual_master_model = m.manual_master_model
                }).DistinctBy(m => m.Manual_name).ToList();
                           
            }
            else if (modeltypeid != "" && languageid == "")
            {
                viewModel.MasterTypes = db.manuals.Where(m => m.manual_modeltypeid.ToString() == modeltypeid).Select(m => new MasterTypesVM()
                {
                    Manualid = m.manualid,
                    Manual_name = m.manual_name,
                    Manual_master_model = m.manual_master_model
                }).DistinctBy(m => m.Manual_name).ToList();
                         
            }
            else if (modeltypeid == "" && languageid != "")
            {
                viewModel.MasterTypes = db.manuals.Where(m => m.manual_languageid.ToString() == languageid).Select(m => new MasterTypesVM()
                {
                    Manualid = m.manualid,
                    Manual_name = m.manual_name,
                    Manual_master_model = m.manual_master_model
                }).DistinctBy(m => m.Manual_name).ToList();
                               
            }
            else
            {
                viewModel.MasterTypes = db.manuals.Select(m => new MasterTypesVM()
                {
                    Manualid = m.manualid,
                    Manual_name = m.manual_name,
                    Manual_master_model = m.manual_master_model
                }).DistinctBy(m => m.Manual_name).ToList();
                              
            }

            viewModel.LocalizedManualDetails = new LocalizedManualDetails();
            
            return View(viewModel);

        }
        public ActionResult Groups()
        {
            var languageid = CultureHelper.CurrentCulture.ToString();

            ViewBag.modeltypeid = "";
            if (languageid == null)
            {
                languageid = "";
            }

            var mastertypes = db.manual_groups.Where(m => m.languageid.ToString() == languageid);

            var viewModel = new MainViewModel
            {
                MasterTypes = mastertypes.Select(m => new MasterTypesVM()
                {
                    Manualid = (int)m.manualid,
                    //Manual_name = m.manuals.manual_name,
                    Manual_master_model = m.manual_group_name
                }).OrderBy(m => m.Manual_master_model).DistinctBy(m => m.Manual_master_model).ToList(),
                LocalizedManualDetails = new LocalizedManualDetails()
            };

            return View(viewModel);
        }
        [HttpPost]
        public ActionResult Groups(FormCollection form, MainViewModel viewModel)
        {


            var modeltypeid = "";
            var languageid = CultureHelper.CurrentCulture.ToString();
            if (languageid == null)
            {
                languageid = "";
            }

            if (form.Count > 0)
            {
                modeltypeid = form["modeltypeId"].ToString();
                ViewBag.modeltypeid = modeltypeid;
            }

            if (modeltypeid != "" && languageid != "")
            {
                viewModel.MasterTypes = db.manual_groups.Where(m => m.modeltypeid.ToString() == modeltypeid && m.languageid.ToString() == languageid).Select(m => new MasterTypesVM()
                {
                    Manualid = (int)m.manualid,
                    Manual_name = m.manuals.manual_name,
                    Manual_master_model = m.manual_group_name
                }).OrderBy(m => m.Manual_master_model).ToList();

            }
            else if (modeltypeid != "" && languageid == "")
            {
                viewModel.MasterTypes = db.manual_groups.Where(m => m.modeltypeid.ToString() == modeltypeid).Select(m => new MasterTypesVM()
                {
                    Manualid = (int)m.manualid,
                    Manual_name = m.manuals.manual_name,
                    Manual_master_model = m.manual_group_name
                }).OrderBy(m => m.Manual_master_model).ToList();

            }
            else if (modeltypeid == "" && languageid != "")
            {
                viewModel.MasterTypes = db.manual_groups.Where(m => m.languageid.ToString() == languageid).Select(m => new MasterTypesVM()
                {
                    Manualid = (int)m.manualid,
                    Manual_name = m.manuals.manual_name,
                    Manual_master_model = m.manual_group_name
                }).OrderBy(m => m.Manual_master_model).ToList();

            }
            else
            {
                viewModel.MasterTypes = db.manual_groups.Select(m => new MasterTypesVM()
                {
                    Manualid = (int)m.manualid,
                    Manual_name = m.manuals.manual_name,
                    Manual_master_model = m.manual_group_name
                }).OrderBy(m => m.Manual_master_model).ToList();

            }

            viewModel.LocalizedManualDetails = new LocalizedManualDetails();

            return View(viewModel);

        }
        public ActionResult RetrievePDF(int id)
        {

            byte[] manual = GetPDFFromDataBase(id);
            string contenttype = GetContentTypeFromDataBase(id);

            if (manual != null)
            {
                if (contenttype != "" && contenttype != null)
                {
                    if (contenttype == "application/pdf")
                    {
                        MemoryStream pdfStream = new MemoryStream();
                        pdfStream.Write(manual, 0, manual.Length);
                        pdfStream.Position = 0;

                        return new FileStreamResult(pdfStream, contenttype);
                    }
                    else
                    {
                        return File(manual, contenttype);
                    }

                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }
        public ActionResult RetrievePDFName(int id)
        {
            string contenttype = GetPDFNameFromDataBase(id);
            return Content(contenttype);
        }
        public ActionResult RetrieveMasterModel(int id)
        {
            string contenttype = GetMasterModelFromDataBase(id);
            return Content(contenttype);
        }
        public ActionResult RetrievePDFContentType(int id)
        {
            string contenttype = GetContentTypeFromDataBase(id);
            return Content(contenttype);
        }
        public byte[] GetPDFFromDataBase(int Id)
        {
            string sql = "SELECT manual_content FROM manuals where manualid = @id;";
            string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["LocalSqlServer"].ConnectionString;

            using (System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection(connectionString))
            using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(sql, connection))
            {
                System.Data.SqlClient.SqlParameter parameter = new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int);
                parameter.Value = Id;
                command.Parameters.Add(parameter);

                connection.Open();
                object value = command.ExecuteScalar();
                connection.Close();

                if (value != null)
                {
                    return (byte[])value;
                }
            }

            return null;
        }

        public string GetContentTypeFromDataBase(int Id)
        {
            var q = from temp in db.manuals where temp.manualid == Id select temp.manual_url;
            string ct = q.First();
            return ct;
        }
        public string GetPDFNameFromDataBase(int Id)
        {
            var q = from temp in db.manuals where temp.manualid == Id select temp.manual_name;
            string ct = q.First();
            return ct;
        }
        public string GetMasterModelFromDataBase(int Id)
        {
            var q = from temp in db.manuals where temp.manualid == Id select temp.manual_master_model;
            string ct = q.First();
            return ct;
        }
        
        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }

    
}
