// ++++++++++++++++++++++++++++++++++++++++++++++++++
// This code is generated by a tool and is provided "as is", without warranty of any kind, 
// express or implied, including but not limited to the warranties of merchantability, 
// fitness for a particular purpose and non-infringement.
// In no event shall the authors or copyright holders be liable for any claim, damages or
// other liability, whether in an action of contract, tort or otherwise, arising from,
// out of or in connection with the software or the use or other dealings in the software.
// ++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using WebManuals.Models;
using WebManuals.Helper;
using static MoreLinq.Extensions.DistinctByExtension;
using WebManuals.Controllers;
using System.Data.Entity;
using System.Net;
using MoreLinq.Extensions;

namespace WebManuals.Areas.Admin.Controllers
{
    [Authorize]
    public class UploadsController:Controller
	{
	   private WebManuals.Models.webmanualsEntities db = new WebManuals.Models.webmanualsEntities();
        // GET: Admin/manuals/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            manuals manuals = db.manuals.Find(id);
            if (manuals == null)
            {
                return HttpNotFound();
            }
            return View(manuals);
        }
        [HttpGet]
        public ActionResult Create()
        {
            db.Database.CommandTimeout = 120;
            IEnumerable<modeltypes> modeltypelist = db.modeltypes.ToList();
            ViewBag.ModelTypes = modeltypelist;
            IEnumerable<languages> languagelist = db.languages.ToList();
            ViewBag.Languages = languagelist;
            dynamic fileUploadStatus = ViewBag.FileUploadStatus;
            ViewBag.FileUploadStatus = fileUploadStatus;
            //IEnumerable<manual_groups> manualgrouplist = db.manual_groups.Include(m => m.manuals).DistinctBy(m => m.manualid).ToList();

            //ViewBag.ManualGroups = manualgrouplist;

            var viewModel = new MainViewModel
            {
                ManageManuals = db.manual_groups.Include(m => m.languages).Include(m => m.modeltypes).Include(m => m.manuals).Select(m => new ManageManualsVM()
                {
                    manualid = (int)m.manualid,
                    manual_groupid = m.manual_groupid,
                    manual_group_name = m.manual_group_name,
                    manual_name = m.manuals.manual_name,
                    manual_modeltypeid = m.modeltypeid,
                    manual_modeltype_name = m.modeltypes.modeltype_name,
                    manual_languageid = m.languageid,
                    manual_language_name = m.languages.language_name
                    //manual_url = m.manuals.manual_url                
                }).ToList(),
                //MasterTypes = db.manual_groups.Include(m => m.manuals).Select(m => new MasterTypesVM()
                MasterTypes = db.manual_groups.Include(m => m.manuals).Select(m => new MasterTypesVM()
                {
                    Manualid = (int)m.manualid,
                    Manual_name = m.manuals.manual_name,
                }).DistinctBy(m => m.Manual_name).ToList()
            };
            var languages = db.languages.Where(m => m.language_name.ToString() != null).ToList();
            var modeltypes = db.modeltypes.Where(m => m.modeltype_name.ToString() != null).ToList();
              
            return View(viewModel);
           

        }
       

        [HttpPost]
        public ActionResult Create(HttpPostedFileBase[] files, HttpPostedFileBase[] uploadfiles, string languagesarray, string modeltypesarray)
        {

            db.Database.CommandTimeout = 120;
            IEnumerable<modeltypes> modeltypelist = db.modeltypes.ToList();
            ViewBag.ModelTypes = modeltypelist;
            IEnumerable<languages> languagelist = db.languages.ToList();
            ViewBag.Languages = languagelist;
            
            int manualselected = 0;                        
            var lang = languagesarray.Split(',');
            var mod = modeltypesarray.Split(',');
           
            var VM = new MainViewModel();
            //VM.ManageManuals = db.manual_groups.Include(m => m.languages).Include(m => m.modeltypes).Include(m => m.manuals.manual_name).Select(m => new ManageManualsVM()
            VM.ManageManuals = db.manual_groups.Include(m => m.languages).Include(m => m.modeltypes).Include(m => m.manuals).Select(m => new ManageManualsVM()
            {
                manualid = (int)m.manualid,
                manual_group_name = m.manual_group_name,
                manual_name = m.manuals.manual_name,
                manual_modeltypeid = m.modeltypeid,
                manual_modeltype_name = m.modeltypes.modeltype_name,
                manual_languageid = m.languageid,
                manual_language_name = m.languages.language_name
                //manual_url = m.manuals.manual_url             
            }).ToList();
            //VM.MasterTypes = db.manual_groups.Include(m => m.manuals).Select(m => new MasterTypesVM()
            VM.MasterTypes = db.manual_groups.Include(m => m.manuals).Select(m => new MasterTypesVM()
            {
                Manualid = (int)m.manualid,
                Manual_name = m.manuals.manual_name,
            }).DistinctBy(m => m.Manual_name).ToList();

            if (languagesarray == "")
            {
                ModelState.AddModelError(string.Empty, "Unchecked language.");
                VM.Status += "Please select at least one language";
                return View(VM);

            }
            if (modeltypesarray == "")
            {
                ModelState.AddModelError(string.Empty, "Unchecked model type.");
                VM.Status += "Please select at least one model type";
                return View(VM);

            }
            var languages = db.languages.Where(m => m.language_name.ToString() != null).ToList();
            var modeltypes = db.modeltypes.Where(m => m.modeltype_name.ToString() != null).ToList();
            if (uploadfiles == null)
            {
                if (Request.Form["manualselector"] != null)
                {
                    manualselected = int.Parse(Request.Form["manualselector"]);
                }
            }
            else if (uploadfiles[0] == null)
            {
                if (Request.Form["manualselector"] != null)
                {
                    try
                    {
                        manualselected = int.Parse(Request.Form["manualselector"]);
                    }

                    catch (Exception ex)
                    {
                        ModelState.AddModelError(string.Empty, "Manual not selected.");
                        VM.Status += "Please select a Manual from the dropdown";
                        return View(VM);
                    }
                }
            }
            if (files == null)
            {
                if (uploadfiles == null)
                {

                }
                else
                {
                    if (manualselected != 0)
                    {
                        //add model to group
                        string modelname = "";
                        if (Request.Form["modelname"] != null)
                        {
                            modelname = (Request.Form["modelname"]);
                        }
                        if (modelname == "") { modelname = "group" + manualselected; }
                        var modelManGroup = new manual_groups()
                        {

                            manualid = manualselected,
                            manual_group_name = modelname,
                            //languageid = lang[l],
                            //modeltypeid = mod[m]                                                    
                        };
                        for (var m = 0; m < mod.Length; m++)
                        {
                            modelManGroup.modeltypeid = int.Parse(mod[m]);
                            for (var l = 0; l < lang.Length; l++)
                            {
                                modelManGroup.languageid = int.Parse(lang[l]);
                                db.manual_groups.Add(modelManGroup);
                                db.SaveChanges();
                            }
                        }
                    }
                    files = uploadfiles;
                }
            }


            foreach (var file in files) {
                byte[] pdfManual = new byte[0];
                var pdfManualname = "";
                var pdfManualcontenttype = "";
                var allowedExtensions = new[] { ".pdf" };
                if (file == null)
                {
                    if (manualselected != 0)
                    {
                        if (VM.Status == null)
                        {
                            ViewBag.FileUploadStatus = "Model Added successfully";
                            return RedirectToAction("Create");
                            //return View(VM);
                        }
                    }
                    else {
                        VM.Status += "You must select a file.";
                        return View(VM);
                    }
                        
                }
                //check if file with the same name already exists
                var filecount = db.manuals.Where(f => f.manual_name == file.FileName).Count();
                
                if (filecount > 0) {
                    VM.Status += file.FileName + " already exists. Use Additional Model Assignment below to assign manuals to existing groups.";
                    //return View(VM);
                }
                else
                {                
                    if (file != null) {
                        var checkextension = Path.GetExtension(file.FileName).ToLower();

                        if (!allowedExtensions.Contains(checkextension))
                        {
                            ModelState.AddModelError(string.Empty, "PDF files only");
                            VM.Status += checkextension + " is not allowed";
                            return View(VM);

                        }

                        var reader = new BinaryReader(file.InputStream);
                        pdfManual = reader.ReadBytes(file.ContentLength);
                        pdfManualname = Path.GetFileName(file.FileName);
                        pdfManualcontenttype = file.ContentType;
                       
                        string groupname="";
                        if (Request.Form["groupname"] != null)
                        {
                            groupname = (Request.Form["groupname"]);
                        }
                        
                        var modelMan = new manuals()
                        {
                            manual_name = pdfManualname,
                            //manual_languageid = languageid.languageid,
                            //manual_modeltypeid = modeltypeid,
                            manual_url = pdfManualcontenttype,
                            manual_content = pdfManual
                            //manual_master_model = master_model
                        };
                        db.manuals.Add(modelMan);
                        db.SaveChanges();

                        var manualid = modelMan.manualid;

                        if (groupname == "") { groupname = "group" + manualid; }
                        var modelManGroup = new manual_groups() {
                        
                            manualid = modelMan.manualid,
                            manual_group_name = groupname,
                            //languageid = lang[l],
                            //modeltypeid = mod[m]                                                    
                        };
                        for (var m = 0; m < mod.Length; m++)
                        {
                            modelManGroup.modeltypeid = int.Parse(mod[m]);
                            for (var l = 0; l < lang.Length; l++)
                            {
                                modelManGroup.languageid = int.Parse(lang[l]);
                                db.manual_groups.Add(modelManGroup);
                                db.SaveChanges();
                            }
                        }
                      
                    }
                }
            }


                if (VM.Status == null)
            {
                ViewBag.FileUploadStatus = "Files uploaded successfully";
            }
            //ModelState.Clear();
            return RedirectToAction("Create");
            //return View(VM);
        }
        // GET: Admin/manuals/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }          
            manuals manuals = db.manuals.Find(id);
            if (manuals == null)
            {
                return HttpNotFound();
            }
            ViewBag.manual_languageid = new SelectList(db.languages, "languageid", "language_name", manuals.manual_languageid);
            ViewBag.manual_modeltypeid = new SelectList(db.modeltypes, "modeltypeid", "modeltype_name", manuals.manual_modeltypeid);
            return View(manuals);
        }

        // POST: Admin/manuals/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        //[ValidateAntiForgeryToken]        
       
        public ActionResult Edit([Bind(Include = "manualid,manual_name,manual_languageid,manual_modeltypeid,manual_url,manual_content,manual_master_model")] manuals manuals)
        
        {
            if (ModelState.IsValid)
            {               
                db.Entry(manuals).State = EntityState.Modified;
                db.Entry(manuals).Property(p => p.manual_content).IsModified = false;
                db.Entry(manuals).Property(p => p.manual_url).IsModified = false;
                db.SaveChanges();
                return RedirectToAction("Create");
            }
            ViewBag.manual_languageid = new SelectList(db.languages, "languageid", "language_name", manuals.manual_languageid);
            ViewBag.manual_modeltypeid = new SelectList(db.modeltypes, "modeltypeid", "modeltype_name", manuals.manual_modeltypeid);
            return View(manuals);
        }
        // GET: Admin/manuals/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            manuals manuals = db.manuals.Find(id);
            if (manuals == null)
            {
                return HttpNotFound();
            }
            return View(manuals);
        }

        // POST: Admin/manuals/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            manuals manuals = db.manuals.Find(id);
            db.manuals.Remove(manuals);
            db.SaveChanges();
            return RedirectToAction("Create");
        }
        // POST: Admin/uploads/DeleteFromManualGroups/5
        [HttpDelete]
        //[ValidateAntiForgeryToken]
        public ActionResult DeleteFromManualGroups(int? id)
        {
            manual_groups manual = db.manual_groups.Find(id);
            db.manual_groups.Remove(manual);
            db.SaveChanges();
            return RedirectToAction("Create");
        }
        // GET: Admin/manuals/Update/5
        public ActionResult Update(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            manuals manuals = db.manuals.Find(id);
            if (manuals == null)
            {
                return HttpNotFound();
            }
            return View(manuals);
        }

        // POST: Admin/manuals/Update/5
        [HttpPost, ActionName("Update")]
        [ValidateAntiForgeryToken]
        public ActionResult UpdateConfirmed(int id, HttpPostedFileBase[] files)
        {
            manuals manual = db.manuals.Find(id);
            languages language = db.languages.Find(manual.manual_languageid);
            modeltypes modeltype = db.modeltypes.Find(manual.manual_modeltypeid);

            db.manuals.Remove(manual);
                     
            db.SaveChanges();
            //update process
            foreach (var file in files)
            {
                byte[] pdfManual = new byte[0];
                var pdfManualname = manual.manual_name;
                var pdfManualcontenttype = "";
                var allowedExtensions = new[] { ".pdf" };
                
                    if (file != null)
                    {
                       
                        var reader = new BinaryReader(file.InputStream);
                        pdfManual = reader.ReadBytes(file.ContentLength);                        
                        pdfManualcontenttype = file.ContentType;
                    
                    string master_model = pdfManualname.Split('-')[0].Replace(" ", string.Empty);                                        
                    var modelMan = new manuals()
                        {
                            manual_name = pdfManualname,
                            manual_languageid = language.languageid,
                            manual_modeltypeid = modeltype.modeltypeid,
                            manual_url = pdfManualcontenttype,
                            manual_content = pdfManual,
                            manual_master_model = master_model
                        };
                        db.manuals.Add(modelMan);
                        db.SaveChanges();
                    }//                
            }
            //end update
            return RedirectToAction("Create");
        }
        public ActionResult BulkUpload(string path)
        {
            IEnumerable<modeltypes> modeltypelist = db.modeltypes.ToList();
            ViewBag.ModelTypes = modeltypelist;

            if (path != null && path != "")
            {

                ViewBag.path = path;

                //directory path
                //string fileUnformatedPath = "../Uploads/" + UniqueId; //setting final path with unique id
                string fileUnformattedPath = path; //setting final path with unique id

                //getting all files in directory ( if any)
                //string[] FileList = System.IO.Directory.GetFiles(HttpContext.Server.MapPath(fileUnformattedPath));
                string[] FileList = System.IO.Directory.GetFiles(fileUnformattedPath);

                int? modeltypeid = null;
                if (Request.Form["modeltypeselector"] != null)
                {
                    modeltypeid = int.Parse(Request.Form["modeltypeselector"]);

                }

                //for each file in direcotry
                foreach (var file in FileList)
                {
                    //extracting file from directory
                    System.IO.FileStream CurFile = System.IO.File.Open(file, System.IO.FileMode.Open);
                    long fileLength = CurFile.Length;

                    //converting file to a byte array (byte[])
                    byte[] tempFile = new byte[fileLength];
                    CurFile.Read(tempFile, 0, Convert.ToInt32(fileLength));

                    string[] filedirlist = CurFile.Name.Split('\\');//setting file name
                    string filename = filedirlist.ElementAt(filedirlist.Count() - 1);
                    string language = filename.Split('-')[1].Replace(" ", string.Empty).Split('.')[0];

                    var languageid = db.languages.Where(l => l.language_name == language).First();

                    //creating new model
                    var modelMan = new manuals()
                    {
                        manual_name = filedirlist.ElementAt(filedirlist.Count() - 1),                        
                        manual_languageid = languageid.languageid,
                        manual_modeltypeid = modeltypeid,
                        manual_url = "application/pdf",
                        manual_content = tempFile
                    };
                    db.manuals.Add(modelMan);
                    db.SaveChanges();

                    //deleting current file fromd directory
                    CurFile.Flush();
                    //System.IO.File.Delete(file);
                    CurFile.Close();
                }
                
                //System.IO.Directory.Delete(HttpContext.Server.MapPath(fileUnformattedPath));
            }
            return View();
        }
        //public FileResult RetrievePDF(int id)
        //{
        //    string pdfname = GetPDFNameFromDataBase(id);
        //    string filePath = "~/pdfs/" + pdfname;

        //    //byte[] cover = GetPDFFromDataBase(id);
        //    string contenttype = GetContentTypeFromDataBase(id);

        //    //if (cover != null)
        //    //{
        //    if (contenttype != "" && contenttype != null)
        //    {
        //        //if (contenttype == "application/pdf")
        //        //{
        //        //    MemoryStream pdfStream = new MemoryStream();
        //        //    pdfStream.Write(cover, 0, cover.Length);
        //        //    pdfStream.Position = 0;

        //        //    return new FileStreamResult(pdfStream, contenttype);
        //        //}
        //        //else
        //        //{
        //        //    return File(cover, contenttype);
        //        //}
        //        return File(filePath, contenttype);
        //    }
        //    else
        //    {
        //        return null;
        //    }
        //    //}
        //    //else
        //    //{
        //    //    return null;
        //    //}
        //}
        public ActionResult RetrievePDF(int id)
        {

            byte[] manual = GetPDFFromDataBase(id);
            string contenttype = GetContentTypeFromDataBase(id);

            if (manual != null)
            {
                if (contenttype != "" && contenttype != null)
                {
                    if (contenttype == "application/pdf")
                    {
                        MemoryStream pdfStream = new MemoryStream();
                        pdfStream.Write(manual, 0, manual.Length);
                        pdfStream.Position = 0;

                        return new FileStreamResult(pdfStream, contenttype);
                    }
                    else
                    {
                        return File(manual, contenttype);
                    }

                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }
        public ActionResult RetrievePDFName(int id)
        {
            string contenttype = GetPDFNameFromDataBase(id);
            return Content(contenttype);
        }
        public ActionResult RetrieveMasterModel(int id)
        {
            string contenttype = GetMasterModelFromDataBase(id);
            return Content(contenttype);
        }
        public ActionResult RetrievePDFContentType(int id)
        {
            string contenttype = GetContentTypeFromDataBase(id);
            return Content(contenttype);
        }
        static byte[] GetPDFFromDataBase(int Id)
        {
            /* - takes 13 seconds in ssms
             LocalSqlServer
             SELECT manual_content      
             FROM [webmanuals].[dbo].[manuals]
             where manuals.manualid ='79';
             */
            string sql = "SELECT manual_content FROM manuals where manualid = @id;";
            string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["LocalSqlServer"].ConnectionString;

            using (System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection(connectionString))
            using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(sql, connection))
            {
                System.Data.SqlClient.SqlParameter parameter = new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int);
                parameter.Value = Id;
                command.Parameters.Add(parameter);

                connection.Open();
                object value = command.ExecuteScalar();
                connection.Close();

                if (value != null)
                {
                    return (byte[])value;
                }
            }

            return null;
            //var m = from temp in db.manuals where temp.manualid == Id select temp.manual_content; //timeout
            //byte[] manual = m.First();
            //return manual;
        }

        public string GetContentTypeFromDataBase(int Id)
        {
            var q = from temp in db.manuals where temp.manualid == Id select temp.manual_url;
            string ct = q.First();
            return ct;
        }
        public string GetPDFNameFromDataBase(int Id)
        {
            var q = from temp in db.manuals where temp.manualid == Id select temp.manual_name;
            string ct = q.First();
            return ct;
        }
        public string GetMasterModelFromDataBase(int Id)
        {
            var q = from temp in db.manuals where temp.manualid == Id select temp.manual_master_model;
            string ct = q.First();
            return ct;
        }
       
        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
  
}
